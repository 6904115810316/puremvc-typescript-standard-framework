<?xml version="1.0" encoding="utf-8"?>
<project name="YUICompression" basedir="." default="build.all">



	<!-- ////////////////////////////////////////////////////////////////// -->
	<!-- /////////////////////////// PROPERTIES /////////////////////////// -->
	<!-- ////////////////////////////////////////////////////////////////// -->

	<property file="build.properties" />



	<!-- ////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////// IMPORT ////////////////////////////// -->
	<!-- ////////////////////////////////////////////////////////////////// -->

	<!-- AntContrib -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${antcontrib.file}"/>
		</classpath>
	</taskdef>



	<!-- ////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////// COMPILE ///////////////////////////// -->
	<!-- ////////////////////////////////////////////////////////////////// -->

	<target name="compile.src" description="Concatenate and minifiy a set of files">

		<!--
			Because the TypeScript compiler doesn't know how to output a specific file to a specific
			path. We let it output JavaScript compiled files beside TypeScript files. As the
			TypeScript files must be removed at the end of the operation, it's better to work on a
			copy of the source files for obvious reasons. The generated directory will also be used
			to debug plain JavaScript files stored in their respective class path.

			Ant can fix the problem using <apply /> and <redirector /> but it is way too slow
			because it process each file independently in a tsc call for each file.
		-->
		<copy todir="${src-js.dir}" overwrite="true">
			<fileset dir="${src.dir}">
				<include name="**/*.ts" />
			</fileset>
		</copy>

		<!-- Compile plain JavaScript files in their respective directories for debug -->
		<exec executable="${typescript.compiler.path}">
			<arg value="@src-compile.list"/>
		</exec>

		<!-- Compile a single plain JavaScript file ready to be minified -->
		<exec executable="${typescript.compiler.path}">

			<arg value="@src-release-compile.list"/>
			<!-- Can't add the out argument here, probably because it use a .cmd to forward to node -->

		</exec>

		<antcall target="clean.src-js" />

	</target>

	<target name="compile.test" description="Concatenate and minifiy a set of files">

		<!--
			Because the TypeScript compiler doesn't know how to output a specific file to a specific
			path. We let it output JavaScript compiled files beside TypeScript files. As the
			TypeScript files must be removed at the end of the operation, it's better to work on a
			copy of the source files for obvious reasons. The generated directory will also be used
			to debug plain JavaScript files stored in their respective class path.

			Ant can fix the problem using <apply /> and <redirector /> but it is way too slow
			because it process each file independently in a tsc call for each file.
		-->
		<copy todir="${test-src-js.dir}" overwrite="true">
			<fileset dir="${test-src.dir}">
				<include name="**/*.ts" />
			</fileset>
		</copy>

		<exec executable="${typescript.compiler.path}">
			<arg value="@test-compile.list"/>
		</exec>

		<antcall target="clean.test-src-js" />

	</target>



	<!-- ////////////////////////////////////////////////////////////////// -->
	<!-- ///////////////////////////// MINIFY ///////////////////////////// -->
	<!-- ////////////////////////////////////////////////////////////////// -->

	<target name="compress" description="Minifiy the release JavaScript file">

		<taskdef name="yuicompress" classname="com.yahoo.platform.yui.compressor.YUICompressTask">
			<classpath>
				<pathelement path="${yuicompressor.file}" />
				<pathelement path="${yuiant.file}" />
			</classpath>
		</taskdef>

		<yuicompress
			charset="UTF-8"
			linebreak="500"
			warn="false"
			munge="yes"
			preserveallsemicolons="false"
			preservestringlitterals="false"
			outputfolder="${bin.dir}"
			outputsuffix="-min"
		>
			<fileset dir="${bin.dir}">
				<include name="*.js"/>
			</fileset>
		</yuicompress>

	</target>



	<!-- ////////////////////////////////////////////////////////////////// -->
	<!-- ///////////////////////////// CLEAN ////////////////////////////// -->
	<!-- ////////////////////////////////////////////////////////////////// -->

	<target name="clean.bin" description="Clean bin directory">

		<delete>
			<fileset dir="${bin.dir}">
				<include name="*.js" />
			</fileset>
		</delete>

	</target>

	<target name="clean.src-js" description="Clean src-js output directory from its TypeScript files">

		<delete>
			<fileset dir="${src-js.dir}">
				<include name="**/*.ts" />
				<include name="src-compile.list" />
			</fileset>
		</delete>

	</target>

	<target name="clean.test-src-js" description="Clean test src-js output directory from its TypeScript files ">

		<delete>
			<fileset dir="${test-src-js.dir}">
				<include name="**/*.ts" />
				<include name="test-compile.list" />
			</fileset>
		</delete>

	</target>

	<target name="remove.src-js" description="Remove the src-js output directory from the project">

		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${src-js.dir}" />
		</delete>

	</target>

	<target name="remove.test-js" description="Remove the test-js output directory from the project">

		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${test-src-js.dir}/" />
		</delete>

	</target>



	<!-- ////////////////////////////////////////////////////////////////// -->
	<!-- ////////////////////////////// BUILD ///////////////////////////// -->
	<!-- ////////////////////////////////////////////////////////////////// -->

	<target
		name="build.src"
		description="Compile src from TypeScript to JavaScript, concatenate and minify it into a single file"
		depends=
		"
			clean.bin,
			remove.src-js,
			compile.src,
			compress
		"
	/>

	<target
		name="build.test"
		description="Compile tests from TypeScript to JavaScript"
		depends=
		"
			clean.bin,
			remove.test-js,
			compile.test
		"
	/>

	<target
		name="build.all"
		description="Compile TypeScript to JavaScript, concatenate JavaScript and minify sets of JavaScript files"
		depends=
		"
			build.src,
			build.test
		"
	/>

</project>
